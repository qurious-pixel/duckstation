name: Create rolling release

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - 'appveyor.yml'
      - 'scripts/*'
      - '.github/ISSUE_TEMPLATE/*'
  push:
    paths-ignore:
      - '**.md'
      - 'appveyor.yml'
      - 'scripts/*'
      - '.github/ISSUE_TEMPLATE/*'
  workflow_dispatch:

jobs:
  linux-build:
    runs-on: ubuntu-20.04
    env:
      QTVER: 5.15.2
      QTVERMIN: 515
      UBUNTU_VER: focal
    steps:
    - uses: actions/checkout@v2.3.1
      with:
        fetch-depth: 0

    - name: Install packages
      shell: bash
      run: |
        sudo add-apt-repository -y ppa:beineri/opt-qt-${QTVER}-${UBUNTU_VER}
        sudo apt-get update
        #sudo apt-get -y install cmake ninja-build ccache libsdl2-dev libgtk-3-dev libegl1-mesa-dev libevdev-dev libgbm-dev libdrm-dev libwayland-dev libwayland-egl-backend-dev extra-cmake-modules libcurl4-gnutls-dev libxrandr-dev
        #sudo apt-get -y install cmake ninja-build ccache libsdl2-dev libgtk-3-dev qtbase5-dev qtbase5-dev-tools qtbase5-private-dev qt5-default qttools5-dev qtwayland5 libegl1-mesa-dev libevdev-dev libgbm-dev libdrm-dev libqt5waylandclient5-dev libqt5waylandcompositor5-dev libwayland-dev libwayland-egl-backend-dev extra-cmake-modules libcurl4-gnutls-dev libxrandr-dev
        sudo apt-get -y install cmake ninja-build ccache libsdl2-dev libgtk-3-dev qt${QTVERMIN}base qt${QTVERMIN}declarative qt${QTVERMIN}xmlpatterns qt${QTVERMIN}svg qt${QTVERMIN}tools qt${QTVERMIN}translations qt${QTVERMIN}wayland qt${QTVERMIN}webengine libegl1-mesa-dev libevdev-dev libgbm-dev libdrm-dev libwayland-dev libwayland-egl-backend-dev extra-cmake-modules libcurl4-gnutls-dev libxrandr-dev
        #sudo apt-get -y install libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev gstreamer1.0-gl gstreamer1.0-gtk3
        
    #- name: Install Qt6
    #  uses: WillBrennan/yaqti@2021.07.29
    #  with:
    #    version: '6.2.0'
    #    os: 'linux'
    #    platform: 'desktop'
    #    modules: 'qtwaylandcompositor'
           
    - name: Compile build
      shell: bash
      env:
        QT5_DIR: "opt/qt515"
        QT6_DIR: "qt/6.2.0"
      run: |
        if [[ -e $QT6_DIR ]]; then
          export CMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/$QT6_DIR/gcc_64
          export Qt6_DIR=${CMAKE_PREFIX_PATH}/lib/cmake/Qt6/
          sudo mv /usr/bin/qmake /usr/bin/qmake5
          sudo ln -s ${GITHUB_WORKSPACE}/$(find qt/ -name qmake) /usr/bin
        else
          export CMAKE_PREFIX_PATH=/$QT5_DIR/lib/cmake
          export Qt5_DIR=${CMAKE_PREFIX_PATH}/Qt5/
          echo "CMAKE_PREFIX_PATH $CMAKE_PREFIX_PATH"
          echo "Qt5_DIR $Qt5_DIR"
          /opt/qt${QTVERMIN}/bin/qt${QTVERMIN}-env.sh
        fi
        echo "Qt version $(qmake -v | grep 'Qt' | awk ' { print $4 } ')"
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_NOGUI_FRONTEND=ON -DBUILD_QT_FRONTEND=ON -DUSE_DRMKMS=ON -DUSE_EGL=ON -DUSE_SDL2=ON -DUSE_WAYLAND=ON -DUSE_X11=ON -G Ninja ..
        ninja
        ../scripts/generate_appimages.sh $(pwd)

    - name: Upload NoGUI AppImage
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-nogui"
        path: "build/duckstation-nogui-x64.AppImage"

    - name: Upload NoGUI AppImage zsync
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-nogui-zsync"
        path: "build/duckstation-nogui-x64.AppImage.zsync"

    - name: Upload Qt AppImage
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-qt"
        path: "build/duckstation-qt-x64.AppImage"

    - name: Upload Qt AppImage zsync
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-qt-zsync"
        path: "build/duckstation-qt-x64.AppImage.zsync"

    - name: Upload Wayland AppImage
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-wayland"
        path: "build/duckstation-wayland-x64.AppImage"

    - name: Upload Wayland AppImage zsync
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-wayland-zsync"
        path: "build/duckstation-wayland-x64.AppImage.zsync"

        
  create-release:
    needs: [linux-build]
    runs-on: "ubuntu-20.04"
    if: github.ref == 'refs/heads/appimage' || github.ref == 'refs/heads/QT5-6'
    steps:
      - name: Download NoGUI AppImage Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-nogui"

      - name: Download NoGUI AppImage zsync Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-nogui-zsync"

      - name: Download Qt AppImage Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-qt"

      - name: Download Qt AppImage zsync Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-qt-zsync"

      - name: Download Wayland AppImage Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-wayland"

      - name: Download Wayland AppImage zsync Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-wayland-zsync"
          
      - name: Create preview release
        if: github.ref == 'refs/heads/appimage'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "preview"
          prerelease: true
          title: "Latest Preview Build"
          files: |
            linux-x64-appimage-nogui/duckstation-nogui-x64.AppImage
            linux-x64-appimage-nogui-zsync/duckstation-nogui-x64.AppImage.zsync
            linux-x64-appimage-qt/duckstation-qt-x64.AppImage
            linux-x64-appimage-qt-zsync/duckstation-qt-x64.AppImage.zsync
            linux-x64-appimage-wayland/duckstation-wayland-x64.AppImage
            linux-x64-appimage-wayland-zsync/duckstation-wayland-x64.AppImage.zsync
            
      - name: Create dev release
        if: github.ref == 'refs/heads/QT5-6'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          title: "QT6 Development Build"
          files: |
            linux-x64-appimage-nogui/duckstation-nogui-x64.AppImage
            linux-x64-appimage-nogui-zsync/duckstation-nogui-x64.AppImage.zsync
            linux-x64-appimage-qt/duckstation-qt-x64.AppImage
            linux-x64-appimage-qt-zsync/duckstation-qt-x64.AppImage.zsync
            linux-x64-appimage-wayland/duckstation-wayland-x64.AppImage
            linux-x64-appimage-wayland-zsync/duckstation-wayland-x64.AppImage.zsync
