name: Create rolling release

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - 'appveyor.yml'
      - 'scripts/*'
      - '.github/ISSUE_TEMPLATE/*'
  push:
    branches:
      - master
      - QT6-submodule
    paths-ignore:
      - '**.md'
      - 'appveyor.yml'
      - 'scripts/*'
      - '.github/ISSUE_TEMPLATE/*'
  workflow_dispatch:

jobs:
  linux-build:
    runs-on: ubuntu-20.04
    env:
      QTVER: 5.15.2
      QTVERMIN: 515
      UBUNTU_VER: focal
      QT6VERSION: 6.2.0
      USE_QT6: true 
    steps:
    - uses: actions/checkout@v2.3.1
      with:
        fetch-depth: 0

    - name: Install packages
      shell: bash
      run: |
        sudo add-apt-repository -y ppa:beineri/opt-qt-${QTVER}-${UBUNTU_VER}
        sudo apt-get update
        sudo apt-get -y install cmake ninja-build ccache libsdl2-dev libgtk-3-dev qt${QTVERMIN}base qt${QTVERMIN}declarative qt${QTVERMIN}xmlpatterns qt${QTVERMIN}svg qt${QTVERMIN}tools qt${QTVERMIN}translations qt${QTVERMIN}wayland qt${QTVERMIN}webengine libegl1-mesa-dev libevdev-dev libgbm-dev libdrm-dev libwayland-dev libwayland-egl-backend-dev extra-cmake-modules libcurl4-gnutls-dev libxrandr-dev

    #- name: Install Qt6
    #  uses: WillBrennan/yaqti@2021.07.29
    #  with:
    #    version: "${{ env.QT6VERSION }}"
    #    os: 'linux'
    #    platform: 'desktop'
    #    modules: 'qtwaylandcompositor'
        
    - name: Compile build
      shell: bash
      env:
        QT5_DIR: "opt/qt${{ env.QTVERMIN }}"   
        QT6_DIR: "dep/msvc/qt/${{ env.QT6VERSION }}"
      run: |
        set -x
        if [[ ${{ env.USE_QT6 }} == true ]]; then 
        QT_CMAKE_VER="-DUSE_QT6=ON"
        echo $QT_CMAKE_VER
        ls -al dep/msvc/qt/
          if [[ ! -e $QT6_DIR ]]; then
            curl -sSfLO https://github.com/qurious-pixel/duckstation-ext-qt-minimal/releases/download/v6.2.0/Qt_6.2.0.tar.gz
            tar -xvf Qt_6.2.0.tar.gz -C dep/msvc/qt/
          fi
        ls -al . | grep *.gz
        ls -al dep/msvc/qt/
        ls "dep/msvc/qt/${{ env.QT6VERSION }}"
        sudo mv /usr/bin/qmake /usr/bin/qmake5
        sudo ln -s $(find /${QT6_DIR} -name qmake) /usr/bin    
        else
          QT_CMAKE_VER="-DUSE_QT6=OFF"
          export CMAKE_PREFIX_PATH=/$QT5_DIR/lib/cmake
          export Qt5_DIR=${CMAKE_PREFIX_PATH}/Qt5/
          sudo mv /usr/bin/qmake /usr/bin/qmake5
          sudo ln -s $(find /${QT5_DIR} -name qmake) /usr/bin          
        fi
        echo "Qt version $(qmake -v | grep 'Qt' | awk ' { print $4 } ')"       
        mkdir build
        cd build
        cmake ${QT_CMAKE_VER} -DCMAKE_BUILD_TYPE=Release -DBUILD_NOGUI_FRONTEND=ON -DBUILD_QT_FRONTEND=ON -DUSE_DRMKMS=ON -DUSE_EGL=ON -DUSE_SDL2=ON -DUSE_WAYLAND=ON -DUSE_X11=ON -G Ninja ..
        ninja
        ../scripts/generate_appimages.sh $(pwd)

    - name: Upload NoGUI AppImage
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-nogui"
        path: "build/duckstation-nogui-x64.AppImage"

    - name: Upload NoGUI AppImage zsync
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-nogui-zsync"
        path: "build/duckstation-nogui-x64.AppImage.zsync"

    - name: Upload Qt AppImage
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-qt"
        path: "build/duckstation-qt-x64.AppImage"

    - name: Upload Qt AppImage zsync
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-qt-zsync"
        path: "build/duckstation-qt-x64.AppImage.zsync"

  create-release:
    needs: [linux-build]
    runs-on: "ubuntu-20.04"
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
    steps:
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v1
        with:
          name: "windows"

      - name: Download Windows ARM64 Artifact
        uses: actions/download-artifact@v1
        with:
          name: "windows-arm64"

      - name: Download Windows UWP Artifact
        uses: actions/download-artifact@v1
        with:
          name: "windows-uwp"

      - name: Download NoGUI AppImage Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-nogui"

      - name: Download NoGUI AppImage zsync Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-nogui-zsync"

      - name: Download Qt AppImage Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-qt"

      - name: Download Qt AppImage zsync Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-qt-zsync"
          
      - name: Create preview release
        if: github.ref == 'refs/heads/master'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "preview"
          prerelease: true
          title: "Latest Preview Build"
          files: |
            windows/duckstation-windows-x64-release.zip
            windows/duckstation-windows-x64-release-symbols.zip
            windows-arm64/duckstation-windows-arm64-release.zip
            windows-arm64/duckstation-windows-arm64-release-symbols.zip
            windows-uwp/duckstation-uwp.appx
            windows-uwp/duckstation-uwp.der
            linux-x64-appimage-nogui/duckstation-nogui-x64.AppImage
            linux-x64-appimage-nogui-zsync/duckstation-nogui-x64.AppImage.zsync
            linux-x64-appimage-qt/duckstation-qt-x64.AppImage
            linux-x64-appimage-qt-zsync/duckstation-qt-x64.AppImage.zsync
          
      - name: Create dev release
        if: github.ref == 'refs/heads/dev'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          title: "Latest Development Build"
          files: |
            windows/duckstation-windows-x64-release.zip
            windows/duckstation-windows-x64-release-symbols.zip
            windows-arm64/duckstation-windows-arm64-release.zip
            windows-arm64/duckstation-windows-arm64-release-symbols.zip
            windows-uwp/duckstation-uwp.appx
            windows-uwp/duckstation-uwp.der
            linux-x64-appimage-nogui/duckstation-nogui-x64.AppImage
            linux-x64-appimage-nogui-zsync/duckstation-nogui-x64.AppImage.zsync
            linux-x64-appimage-qt/duckstation-qt-x64.AppImage
            linux-x64-appimage-qt-zsync/duckstation-qt-x64.AppImage.zsync
             
